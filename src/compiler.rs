use std::{path::PathBuf, process::Command};

use crate::manifest;

/// Any type that implements this trait can be used to generate a command to compile a package.
///
/// For instance you might implement a generator for GCC, Clang, MSVC and other compilers based on the
/// manifest of the package
pub trait Compiler {
    /// Generates the compile command for a specific file
    ///
    /// It must be able to compile the input from the `source_path` and produce a file in `output_path`
    /// with the result.
    ///
    /// It may use the package info to modify the way the command is generated (e.g. with compiler flags or dependencies)
    fn compile_command(
        &self,
        source_path: PathBuf,
        output_path: PathBuf,
        package_info: &manifest::Package,
    ) -> Command;

    /// Generates a link command
    ///
    /// It must link all the object files at the specified paths generated by the `compile_command` function
    /// on this trait and produce a executable at `output_path`.
    ///
    /// It may use the package info to modify the way the command is generated (e.g. with linker flags or dependencies)
    fn link_command(
        &self,
        object_files: Vec<PathBuf>,
        output_path: PathBuf,
        package_info: &manifest::Package,
    ) -> Command;
}
